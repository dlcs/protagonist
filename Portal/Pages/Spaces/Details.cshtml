@page "{id}"
@using DLCS.HydraModel
@model Portal.Pages.Spaces.Details

@{
    ViewData["Title"] = $"Space {Model.SpaceId}: {Model.SpacePageModel.Space?.Name}";
}

@if (TempData["error-message"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error:</strong> @TempData["error-message"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}


@section header
{
    <link href="https://cdn.jsdelivr.net/npm/dropzone@5.9.2/dist/min/dropzone.min.css" rel="stylesheet" />
    <link href="~/assets/dist/css/jquery-ui.min.css" rel="stylesheet" />
    <link href="~/assets/dist/css/jquery-ui.structure.min.css" rel="stylesheet" />
}



<form action="/dropzone/@Model.Customer/@Model.SpaceId/upload"
      class="dropzone"
      id="dropzoneForm">
</form>

<form method="post" asp-page-handler="Convert" id="manifestForm">
    <input type="hidden" value="@Model.SpaceId" name="spaceId">
    @if (Model.SpacePageModel.IsManifestSpace)
    {
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="toggleManifest" name="manifest-mode" checked>
            <label class="form-check-label" for="toggleManifest">Space is IIIF Manifest</label>
        </div>
        <ul class="list-group list-group-horizontal" id="iiifConverter">
            <li class="list-group-item"><img src="https://avatars.githubusercontent.com/u/5812589?s=100&v=4" height="20" alt="IIIF logo"/></li>
            <li class="list-group-item"><a href="@Model.SpacePageModel.NamedQuery" target="_blank" rel="noopener noreferrer">IIIF Manifest <span data-feather="external-link"></span></a></li>
            <li class="list-group-item"><a href="@Model.SpacePageModel.UniversalViewer" target="_blank" rel="noopener noreferrer">Universal Viewer <span data-feather="external-link"></span></a></li>
            <li class="list-group-item"><a href="@Model.SpacePageModel.MiradorViewer" target="_blank" rel="noopener noreferrer">Mirador <span data-feather="external-link"></span></a></li>
        </ul>
    }
    else
    {
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="toggleManifest" name="manifest-mode">
            <label class="form-check-label" for="toggleManifest">Space is IIIF Manifest</label>
        </div>
    }   
</form>

@await Component.InvokeAsync("Pager", new
{
    total = @Model.PagerValues.Total, pageSize = Model.PagerValues.Size, currentPage = Model.PagerValues.Index
})

<form method="post" asp-page-handler="ReOrder">
    <input type="hidden" value="@Model.SpaceId" name="spaceId">
    
    @{
        var tableClass = "table";
        if (Model.SpacePageModel.IsManifestSpace)
        {
            tableClass = "table manifest";
        }
    }
    <table class="@tableClass" id="assetTable">
        <thead>
        <tr>
            <th scope="col"></th>
            <th scope="col">n1</th>
            <th scope="col">Name</th>
            <th scope="col">Created</th>
            @if (Model.SpacePageModel.IsManifestSpace)
            {
                <th>
                    <div class="btn-group-sm" role="group" aria-label="Ordering1" id="saveOrderGroup">
                        <input type="submit" class="btn btn-primary btn-sm" name="save-order" id="saveOrder" value="Save Order"/>
                    </div>
                </th>
            }
        </tr>
        </thead>
        <tbody>
        @{
            int rowIndex = 0;
            foreach (var image in Model.SpacePageModel.Images.Members)
            {
                <tr>
                    <td>
                        @if (image.Family == AssetFamily.Image)
                        {
                            <iiif-thumb
                                customer-url-part="@Model.Customer"
                                space-url-part="@Model.SpaceId"
                                api-image="@image"
                                class="iiifpreview"
                                settings="@Model.DlcsSettings"
                                small="28" large="200"/>
                        }
                    </td>
                    <td>@image.Number1</td>
                    <td><a asp-page="/Images/Index"
                           asp-route-space="@Model.SpaceId"
                           asp-route-image="@image.GetLastPathElement()">@image.GetLastPathElement()</a></td>
                    <td>@image.Created</td>
                    @if (Model.SpacePageModel.IsManifestSpace)
                    {
                        <td>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-primary move" data-move="up">↑</button>
                                <button type="button" class="btn btn-sm  btn-outline-primary move" data-move="down">↓</button>
                            </div>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm  btn-outline-primary move move-lots" data-move="top">⤒</button>
                                <button type="button" class="btn btn-sm  btn-outline-primary move move-lots" data-move="bottom">⤓</button>
                            </div>
                            <input type="hidden" name="row-id-@(rowIndex)" value="@image.Id" />
                            <input type="hidden" class="updated-order" name="row-index-@(rowIndex)" value="@(rowIndex++)" />
                        </td>
                    }
                </tr>
            }
        }
        </tbody>
    </table>

</form>

@await Component.InvokeAsync("Pager", new
{
    total = @Model.PagerValues.Total, pageSize = Model.PagerValues.Size, currentPage = Model.PagerValues.Index
})

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/dropzone@5.9.2/dist/dropzone.min.js"></script>
    <script src="~/assets/dist/js/jquery-ui.min.js"></script>
    <script>

    Dropzone.options.dropzoneForm = {
        paramName: "file", // The name that will be used to transfer the file
        maxFilesize: 10, // MB,
        maxFiles: 32,
        dictDefaultMessage: "Upload images by dropping them here",
        init: function() {
            this.on("success", fileSuccess);
            this.on("error", fileSuccess);
            this.on("queuecomplete", queuecomplete);
            this.on("drop", drop);
            window.pDropZone = this;
        }
    };
    
        function fileSuccess(file, response) {
            log(response.message);
            $("#assetTable tbody").load(window.location.href + " #assetTable tbody tr", function () {
                // remove dropZone icon
                // rebind move events
            });
        }

        function queuecomplete() {
            log("queuecomplete");
        }

        function drop(e) {
            if (e.dataTransfer.files.length > 0) {
                // dropzone 
            } else {
                //Find the url embedded in the dataTransfer data
                var data = e.dataTransfer.getData("text/html");
                var matches = data.match(/https?:\/\/[^"]+/gi);
                var url = (matches || [false])[0]; //returns the url or false if no match found
                if (url) {
                    pseudoUpload(url);
                }
            }
        }
        
        function pseudoUpload(url) {
            // Create the mock file:
            var mockFile = { name: "External: " + url, size: 0 };

            // Call the default addedfile event handler
            window.pDropZone.emit("addedfile", mockFile);

            // And optionally show the thumbnail of the file:
            //window.pDropZone.emit("thumbnail", mockFile, url);
            // Or if the file on your server is not yet in the right
            // size, you can let Dropzone download and resize it
            // callback and crossOrigin are optional.
            window.pDropZone.createThumbnailFromUrl(mockFile, "/Content/external_link.png"); //, callback, crossOrigin);

            // Make sure that there is no progress bar, etc...
            window.pDropZone.emit("complete", mockFile);
            fetch('/dropzone/@Model.Customer/@Model.SpaceId/external', {
              method: 'POST',
              credentials: 'same-origin',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify({ externalUrl: url }),
            })
            .then(response => response.json())
            .then(data => {
                log("uploaded external url " + url);
                if (window.pDropZone.getQueuedFiles().length === 0 && window.pDropZone.getUploadingFiles().length === 0) {
                    // 
                } else {
                    // 
                }
            })
            .catch((error) => {
                log("FAILED to upload external url " + url + ", " + error);
            });
        }

        function log(s) {
            // $('#logoutput').append(s + "<br/>");
            console.log(s);
        }
        
        let fixHelperModified = function(e, tr) {
            let $originals = tr.children();
            let $helper = tr.clone();
            $helper.children().each(function(index) {
                $(this).width($originals.eq(index).width())
            });
            return $helper;
        }
        
        function updateOrder() {
            $('.updated-order').each(function (i) {
                $(this).val(i++);
            });
        }
            

        
        $('#toggleManifest').bind("click", function () {
            $('#manifestForm').submit();
        });

</script>
    
@if (Model.SpacePageModel.IsManifestSpace)
{
    <script>
            
        function bindTable(){
            $("#assetTable .move").bind("click", function(ev) {
                ev.preventDefault();
                let op = $(this).attr("data-move");
                let row = $(this).parents("tr:first");
                if (op === "up") {
                    row.insertBefore(row.prev());
                } else if (op === "down") {
                    row.insertAfter(row.next());
                } else if (op === "top") {
                    row.insertBefore(row.parent().children().first())
                } else if (op === "bottom") {
                    row.insertAfter(row.parent().children().last())
                }        
                updateOrder();
            });
            $("#assetTable tbody").sortable({
                helper: fixHelperModified,
                stop: updateOrder
            }); // .disableSelection();        
            $("tbody").sortable({
                distance: 5,
                delay: 100,
                opacity: 0.6,
                cursor: 'move',
                update: function() {}
            });
        }
        
        bindTable();
    </script>
}
}

