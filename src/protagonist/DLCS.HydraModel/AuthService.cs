using System.Collections.Generic;
using Hydra;
using Hydra.Model;
using Newtonsoft.Json;

namespace DLCS.HydraModel;

[HydraClass(typeof(AuthServiceClass),
    Description = "IIIF Authentication Service configuration. The services configured here are exposed by the DLCS " +
                  "on IIIF Image API endpoints, so that a viewer that supports the IIIF Auth specification can interact with them" +
                  " to acquire a cookie that will gain access to the images. " +
                  "The DLCS enforces access control on a customer's behalf (this is essential for performance when many hundreds of image" +
                  " tiles are requested). This means it is the DLCS that implements the IIIF auth flow on your behalf. In one special case," +
                  " 'clickthrough', you can configure an auth service in the DLCS that needs no runtime interation with your own systems. " +
                  "However, for more complex scenarios, the DLCS will need to direct the user to your (customer) servers during the auth flow," +
                  " so that they can authenticate against your system. The DLCS then needs to query your system to acquire that user's roles," +
                  "and thereby determine what level of service it can offer the user for a given protected image. See RoleProvider for imformation. " +
                  "The fields of AuthService give you control over how the service will be presented in a viewer that implements the IIF auth flow.",
    UriTemplate = "/customers/{0}/authServices/{1}")]
public class AuthService : DlcsResource
{
    // Mock Model fields
    [JsonIgnore]
    public string? ModelId { get; set; }
    
    [JsonIgnore]
    public int CustomerId { get; set; }
    
    [JsonIgnore]
    public List<AuthService>? ModelNestedServices { get; set; } // provides the nestedServices collection

    public AuthService()
    {
    }

    public AuthService(string baseUrl, int customerId, string serviceId)
    {
        CustomerId = customerId;
        ModelId = serviceId;
        Init(baseUrl, true, customerId, ModelId);
    }

    
    [RdfProperty(Description = "Name of service",
        Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
    [JsonProperty(Order = 11, PropertyName = "name")]
    public string? Name { get; set; }

    [RdfProperty(Description = "IIIF profile (what level of compliance). You will not usually set this.",
        Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
    [JsonProperty(Order = 12, PropertyName = "profile")]
    public string? Profile { get; set; }

    [RdfProperty(Description = "Label that appears in IIIF model. This should be used by the viewer to present the service to the user.",
        Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
    [JsonProperty(Order = 13, PropertyName = "label")]
    public string? Label { get; set; }

    [RdfProperty(Description = "Description that appears in IIIF model. This might be used by the viewer to present the service to the user.",
        Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
    [JsonProperty(Order = 14, PropertyName = "description")]
    public string? Description { get; set; }

    [RdfProperty(Description = "Label that appears on pages generated by DLCS. If the user needs to see an " +
                               "interstitial page provided by the DLCS, this is the heading of the page. " +
                               "An example might be 'you are about to be redirected to the single sign on system of institution X'",
        Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
    [JsonProperty(Order = 15, PropertyName = "pageLabel")]
    public string? PageLabel { get; set; }

    [RdfProperty(Description = "Description that appears on pages generated by DLCS. As with the label above, used by the DLCS to generate pages" +
                               "to present to a user during the flow.",
        Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
    [JsonProperty(Order = 16, PropertyName = "pageDescription")]
    public string? PageDescription { get; set; }

    [RdfProperty(Description = "Label of button used on pages generated by DLCS (or clickthrough)",
        Range = Names.XmlSchema.String, ReadOnly = false, WriteOnly = false)]
    [JsonProperty(Order = 17, PropertyName = "callToAction")]
    public string? CallToAction { get; set; }

    [RdfProperty(Description = "How long a cookie session and bearer token are valid for (seconds)",
        Range = Names.XmlSchema.NonNegativeInteger, ReadOnly = false, WriteOnly = false)]
    [JsonProperty(Order = 18, PropertyName = "timeToLive")]
    public int? TimeToLive { get; set; }

    [HydraLink(Description = "Child auth services of a parent (relationship between login and token,logout)",
        Range = Names.Hydra.Collection, ReadOnly = true, WriteOnly = false)]
    [JsonProperty(Order = 21, PropertyName = "nestedServices")]
    public string? NestedServices { get; set; }

    [HydraLink(Description = "External service that can be used by the DLCS to acquire roles for user sessions. See RoleProvider.",
        Range = "vocab:RoleProvider", ReadOnly = true, WriteOnly = false)]
    [JsonProperty(Order = 22, PropertyName = "roleProvider")]
    public string? RoleProvider { get; set; }
}

public class AuthServiceClass : Class
{
    public AuthServiceClass()
    {
        BootstrapViaReflection(typeof(AuthService));
    }

    public override void DefineOperations()
    {
        string operationId = "_:customer_authService_";

        SupportedOperations = CommonOperations.GetStandardResourceOperations(
            operationId, "Auth Service", Id,
            "GET", "PUT", "PATCH", "DELETE");

        GetHydraLinkProperty("nestedServices").SupportedOperations = CommonOperations
            .GetStandardCollectionOperations(operationId + "nestedService_", "Nested Auth Service", "vocab:AuthService");

        GetHydraLinkProperty("roleProvider").SupportedOperations = CommonOperations
            .GetStandardResourceOperations(operationId + "roleProvider_", "Role Provider", "vocab:Role",
            "GET");
    }
}
